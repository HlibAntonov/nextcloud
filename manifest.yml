jpsType: install
id: nextcloud
name: Nextcloud Standalone Kit
categories:
  - apps/blogs
  - apps/content-management
logo: https://raw.githubusercontent.com/sych74/nextcloud/master/images/logo-nextcloud.png
homepage: http://nextcloud.com/
description:
  text: Nextcloud Standalone with built-in kit for choosing optimal application servers and a set of advanced features for running a private cloud storage solution. Nextcloud deployed as a lightweight standalone container with minimal allocated resources for cost efficiency.
  short: Nextcloud Standalone with built-in kit for choosing optimal application servers and a set of advanced features for running a private cloud storage solution.

baseUrl: https://raw.githubusercontent.com/sych74/nextcloud/master

onBeforeInit: /scripts/onBeforeInit?_r=${fn.random}
onBeforeInstall: /scripts/onBeforeInstall.js?_r=${fn.random}
nodes: definedInOnBeforeInstall

skipNodeEmails: true

settings:
  fields:  
    - caption: Advanced Features
      type: displayfield
      markup:
 
    - caption: Install LiteSpeed High-Performance Web Server
      type: checkbox
      name: ls-addon
      value: true
      disabled: false
      tooltip: "If this option is disabled, the cluster will be installed using NGINX load balancer and application servers"
                 
    - caption: Install Let's Encrypt SSL with Auto-Renewal
      type: checkbox
      name: le-addon
      value: true
      disabled: false
      tooltip: "Advanced integration with Let's Encrypt certificate authority that simplifies and automates the process of issuing, configuring and updating trusted custom SSL certificates."

    - type: displayfield
      name: displayfield   
      hideLabel: true
      hidden: true
      markup:

mixins:
 - /configs/vers.yaml

globals:
  isSingleDeploy: ${settings.isSingleDeploy:true}
  db_user: ${settings.db_user:user-[fn.random]}
  db_pass: ${settings.db_pass:[fn.password(10)]}
  db_host: ${settings.db_host:127.0.0.1}
  nc_admin_pass: ${settings.nc_admin_pass:[fn.password(10)]}
  protocol: ${settings.db_host:http}
  success: default

onInstall:
  - addLimits
  - addMetadata
  - initLEsettings  

  - if (${globals.isSingleDeploy}):
    - setupDomain
    - setupProtocol          
    - createUserDB

    - if (${settings.le-addon:false}): 
      - installLEaddon
      - setupLEdomain
    - if ('${settings.success_email}' != 'false'):
      - return:
          type: success
          message: /success/text/success-${globals.success}.md?_r=${fn.random}
          email: /success/email/success-${nodes.cp.master.nodeType}-${globals.success}.md?_r=${fn.random}

actions:
  addLimits:
    - env.control.ApplyNodeGroupData[cp]:
        data:
          validation : 
            maxCount: 1

  addMetadata:
    script: |
      var metadata = { project: "${settings.project:default}", projectScope: "${settings.projectScope:production}" };
      return api.env.control.ApplyEnvProperty ?
        api.env.control.ApplyEnvProperty('${env.name}', session, metadata) :
        api.env.control.ApplyNodeGroupData('${env.name}', session, 'cp', metadata);

  setupProtocol:
    - script: |
        return {
          result:0,
          ssl: jelastic.billing.account.GetQuotas('environment.jelasticssl.enabled').array[0].value
        }
    - if (${response.ssl} || ${settings.le-addon:false}):
        setGlobals:
          protocol: https

  setupDomain:
    - script: https://raw.githubusercontent.com/jelastic-jps/common/main/idna.js
      domains: ${env.domain}
    - setGlobals:
        domain: ${response.domains} 

  installLEaddon:
    - install: https://github.com/jelastic-jps/lets-encrypt/blob/master/manifest.jps?_r=${fn.random}
      nodeGroup: cp
      skipEmail: true
      settings:
        test: false
        skipEmail: true
        fallbackToX1: true

  initLEsettings:
    - cmd[cp]: |-
        [ ! -d /var/lib/jelastic/keys/letsencrypt ] && mkdir -p /var/lib/jelastic/keys/letsencrypt;
        echo "webroot=true" > /var/lib/jelastic/keys/letsencrypt/settings-custom;
        echo "webrootPath=/var/www/webroot/ROOT" >> /var/lib/jelastic/keys/letsencrypt/settings-custom;
        echo "test=false" >> /var/lib/jelastic/keys/letsencrypt/settings-custom;
      user: root

  setupLEdomain:
    - cmd[cp]: |-
        source /opt/letsencrypt/settings;
        bash ~/bin/setupWP.sh --url https://${domain};
  
  installNC:
    - install: scripts/installApp.jps
      settings:
        db_host: ${globals.db_host}
        db_user: ${globals.db_user}
        db_pass: ${globals.db_pass}
        redis_host: /var/run/redis/redis.sock
        redis_port: 0
        nc_admin_pass: ${globals.nc_admin_pass}
        wp_title: "Hello World"
        wp_url: ${globals.protocol}://${globals.domain}/
        cluster: false

  setupNode:
    - log: OPTIMIZATION
    - install: https://raw.githubusercontent.com/jelastic/templates/master/config_v2.jps?_r=${fn.random}
      settings:
        targetGroup: cp
        targetNodes: ${this.nodeId}
        optimization: wordpress
        
  createUserDB:
    - log: Create user for DataBase
    - cmd [cp]: |-
        wget https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/master/scripts/setupUser.sh -O ~/setupUser.sh >> /var/log/run.log;
        bash ~/setupUser.sh ${globals.db_user} ${globals.db_pass} >> /var/log/run.log;
        jem passwd set -p ${globals.db_pass} >> /var/log/run.log;
      user: root

startPage: ${env.url}